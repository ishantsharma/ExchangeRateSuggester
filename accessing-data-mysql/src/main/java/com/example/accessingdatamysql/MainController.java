package com.example.accessingdatamysql;


import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Iterator;
import java.util.TreeMap;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	public CurrenciesRepository ExchangeRateRepository;
	public TreeMap<String, Float> currerncyMap = new TreeMap<String, Float>();

	public void getValuesForGivenKey()
	{
		try {
		//GsonBuilder builder = new GsonBuilder();
		String url_str = "https://prime.exchangerate-api.com/v5/e73b8b3e6486d19ea1c07b76/latest/USD";

		// Making Request
		URL url = new URL(url_str);
		HttpURLConnection request = (HttpURLConnection) url.openConnection();
		request.connect();

		
		// Convert to JSON
		JsonParser jp = new JsonParser();
		JsonElement root = jp.parse(new InputStreamReader((InputStream) request.getContent()));
		JsonObject jsonobj = root.getAsJsonObject();
		System.out.println(jsonobj.toString());



		TreeMap<String, Float> currenciesKVPair = new TreeMap<String, Float>();
		JsonObject currencyObj = jsonobj.getAsJsonObject("conversion_rates");
		String currency = currencyObj.toString();
		//System.out.println(currency);

		String cadObj = currencyObj.get("CAD").toString();
		String eurObj = currencyObj.get("EUR").toString();
		String gbpObj = currencyObj.get("GBP").toString();
		String inrObj = currencyObj.get("INR").toString();
		String usdObj = currencyObj.get("USD").toString();
		String jpyObj = currencyObj.get("JPY").toString();
		String cnyObj = currencyObj.get("CNY").toString();


		currenciesKVPair.put("CAD", Float.valueOf(cadObj));
		currenciesKVPair.put("EUR", Float.valueOf(eurObj));
		currenciesKVPair.put("GBP", Float.valueOf(gbpObj));
		currenciesKVPair.put("INR", Float.valueOf(inrObj));
		currenciesKVPair.put("USD", Float.valueOf(usdObj));
		currenciesKVPair.put("JPY", Float.valueOf(jpyObj));
		currenciesKVPair.put("CNY", Float.valueOf(cnyObj));
		currerncyMap = currenciesKVPair;
		}
		catch(IOException x) {
			System.out.println("There was an error: " + x);
		}
		//System.out.println("\nForex for the day:"+ currenciesKVPair);
	}


	@GetMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewCurrency(@RequestParam String unique_date) /*(@RequestParam Date unique_date
      , @RequestParam float CAD
      , @RequestParam float EUR
      , @RequestParam float GBP
      , @RequestParam float INR
      , @RequestParam float USD
      , @RequestParam float YEN
      , @RequestParam float YUA) */{
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		this.getValuesForGivenKey();
		Currencies n = new Currencies();
		n.setUnique_date(unique_date);

		n.setCAD(currerncyMap.get("CAD"));
		n.setEUR(currerncyMap.get("EUR"));
		n.setGBP(currerncyMap.get("GBP"));
		n.setINR(currerncyMap.get("INR"));
		n.setUSD(currerncyMap.get("USD"));
		n.setJPY(currerncyMap.get("JPY"));
		n.setCNY(currerncyMap.get("CNY"));
		ExchangeRateRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Currencies> getAllCurrencies() {
		// This returns a JSON or XML with the users
		//String response = ExchangeRateRepository.findAll().toString();
		System.out.print("hello");

		return ExchangeRateRepository.findAll();
	}
}